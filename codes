import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
# Uncomment the next line if you're using Google Colab
# from google.colab import files  

# Step 1: Load the CSV file (Modify the file path as necessary)
data_path = 'your_stock_data.csv'  # Replace with your CSV file path
df = pd.read_csv(data_path)

# Display the first few rows of the data
print(df.head())

# Step 2: Use 'Close' price for predictions
data = df['Close'].values
data = data.reshape(-1, 1)

# Normalize the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data)

# Step 3: Create Training and Testing Sets
train_size = int(len(scaled_data) * 0.8)
test_size = len(scaled_data) - train_size
train_data, test_data = scaled_data[0:train_size, :], scaled_data[train_size:len(scaled_data), :]

# Convert to time series format for LSTM
def create_dataset(data, time_step=1):
    X, Y = [], []
    for i in range(len(data)-time_step-1):
        a = data[i:(i+time_step), 0]
        X.append(a)
        Y.append(data[i + time_step, 0])
    return np.array(X), np.array(Y)

time_step = 60  # Looking at the past 60 days to predict the next
X_train, y_train = create_dataset(train_data, time_step)
X_test, y_test = create_dataset(test_data, time_step)

# Reshape input for LSTM: [samples, time steps, features]
X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

# Step 4: Build the LSTM Model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(time_step, 1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Step 5: Train the Model
model.fit(X_train, y_train, batch_size=64, epochs=100, verbose=1)

# Step 6: Predictions
train_predict = model.predict(X_train)
test_predict = model.predict(X_test)

# Inverse scaling to get the original values
train_predict = scaler.inverse_transform(train_predict)
test_predict = scaler.inverse_transform(test_predict)

# Step 7: Visualize the results
plt.figure(figsize=(16,8))
plt.title('Stock Price Prediction (Nepali Stock Market)')
plt.plot(df['Close'], label='True Price', color='blue')
plt.plot(np.arange(time_step, time_step + len(train_predict)), train_predict, label='Train Prediction', color='green')
plt.plot(np.arange(time_step + len(train_predict) + time_step, len(df)), test_predict, label='Test Prediction', color='red')
plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.legend()
plt.show()
